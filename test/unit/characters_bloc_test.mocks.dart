// Mocks generated by Mockito 5.4.4 from annotations
// in rick_and_morty_app/test/characters_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:rick_and_morty_app/src/features/characters/domain/models/character.dart'
    as _i4;
import 'package:rick_and_morty_app/src/features/characters/domain/repositories/characters_repository_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ICharactersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICharactersRepository extends _i1.Mock
    implements _i2.ICharactersRepository {
  MockICharactersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Character>> loadCharacters({
    int? page = 1,
    int? pageLimit = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCharacters,
          [],
          {
            #page: page,
            #pageLimit: pageLimit,
          },
        ),
        returnValue: _i3.Future<List<_i4.Character>>.value(<_i4.Character>[]),
      ) as _i3.Future<List<_i4.Character>>);

  @override
  _i3.Future<List<_i4.Character>> loadFavorites() => (super.noSuchMethod(
        Invocation.method(
          #loadFavorites,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Character>>.value(<_i4.Character>[]),
      ) as _i3.Future<List<_i4.Character>>);

  @override
  _i3.Future<void> toggleFavoriteStatus(int? characterId) =>
      (super.noSuchMethod(
        Invocation.method(
          #toggleFavoriteStatus,
          [characterId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
